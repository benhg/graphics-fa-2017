
#include <FPT.h>
#include <math.h>
#define GRAPHICS_WIDTH 1920
#define GRAPHICS_HEIGHT 1080
#define TRUE 1
#define FALSE !TRUE

void polygon(double *x, double *y, int n){
	int i, j;
	for(i = 0; i < n ; i++){
	j = (i+1) % n;
	G_line(x[i],y[i], x[j], y[j]);	
	}
}
double intersect(double *a, double *b, y){
	if(a[1] < y && b[1] > y || a[1] > y && b[1] < y){
	double m = (b[1]-a[1])/(b[0]-a[0]);
	double off = b[1] - (b[0]*m);
	return (y-off) / m;
	}else{
	return -1
	}
}
void fill_polygon(double *x, double *y, int n){
	int i, j, k;
	for (i=0; i < GRAPHICS_HEIGHT; i++){
		
	}
}

void draw(double x_c, double y_c, double rad){
	G_circle(x_c, y_c, rad);
	double x[10],y[10];
	double angle = 1.26;
	double theta = 3.1415 / 2;
	int i = 0;
	for(theta = 3.1415 / 2.0; theta < (3.1415 / 2 ) + (8 * angle); theta += 2 * angle){
		printf("%f : %f\n", theta, rad);
		x[i] = (cos(theta) * rad) + x_c;
		y[i] = (sin(theta) * rad) + y_c;
		printf("%f,%f\n", x[i], y[i]);
		i++;
	}
	// circle(x[0], y[0], 10);
	fill_polygon(x, y, 5);
}

int main(){
	G_init_graphics(GRAPHICS_WIDTH, GRAPHICS_HEIGHT);
G_rgb(0, 0, 0);
	while(1){
		double p[2], r[2];
		G_fill_rectangle(0,0,50,50);
		G_wait_click(p);
		if(p[0] < 50 && p[1] < 50){
			break;
		}
		G_wait_click(r);
		double rad = sqrt(pow((r[0] - p[0]),2) + pow(r[1] - p[1],2));
		draw(p[0], p[1], rad);
	}
	G_close();
	//HI ARDEN
}
