
#include <D2d_matrix.h>
//hi


/*

 ( x')          (x)
 ( y')  =   M * (y)  
 ( 1 )          (1)

instead of (x',y',1) = (x,y,1) * M  

*/



int D2d_print_mat (double a[3][3])
{
  int r,c ;
  for (r = 0 ; r < 3 ; r++ ) {
      for (c = 0 ; c < 3 ; c++ ) {
           printf(" %12.4lf ",a[r][c]) ;//prints 8 digits, 4 after decimal, 12 total
      }
      printf("\n") ;
  }

  return 1 ;
} 



int D2d_copy_mat (double a[3][3], double b[3][3])
// a = b
{
  int r,c ;
  for (r = 0 ; r < 3 ; r++ ) {
      for (c = 0 ; c < 3 ; c++ ) {
           a[r][c] = b[r][c] ;
      }
  }

  return 1 ;
} 



int D2d_make_identity (double a[3][3])
{
  int r,c ;
  for (r = 0 ; r < 3 ; r++ ) {
      for (c = 0 ; c < 3 ; c++ ) {
           if (r == c) a[r][c] = 1.0 ;
               else    a[r][c] = 0.0 ;
      }
  }

  return 1 ;
} 


///////////////////////////////////////////////mycode////////////////////////////////


int D2d_mat_mult (double res[3][3], double a[3][3], double b[3][3]) {//dunno if works
//idk what the thing about being safe in the header is all about
  double t[3][3];
  int r,c, k;
  double tot;
  for (r = 0 ; r < 3 ; r++ ) {
    for (c = 0 ; c < 3 ; c++ ) {
      tot = 0;
      for (k = 0; k < 3; k++) {
        tot = tot + (a[r][k] * b[k][c]);
      }
      t[r][c] = tot;
    }
  }

  D2d_copy_mat(res, t);
  return 1;
}



int D2d_mat_mult_points (double *X, double *Y, double m[3][3],
                         double *x, double *y, int numpoints) {
  double t[numpoints];
  int r, c, k;
  double tot;
  for (c = 0 ; c < numpoints ; c++ ) {
    tot = 0;
    tot = (m[0][0] * x[c]);
    tot = tot + (m[0][1] * y[c]);
    tot = tot + (m[0][2] * 1);
    t[c] = tot;
  }
  
  for (c = 0; c < numpoints; c++) {
    X[c] = t[c];
  }

  for (c = 0 ; c < numpoints ; c++ ){
    tot = 0;
    tot = (m[1][0] * x[c]);
    tot = tot + (m[1][1] * y[c]);
    tot = tot + (m[1][2] * 1);
    t[c] = tot;
  }

  for (c = 0; c < numpoints; c++) {
    Y[c] = t[c];
  }
  
  return 1;
}



int D2d_scale (double a[3][3], double b[3][3], double sx, double sy) {
  double t[3][3] ;
  D2d_make_identity(t) ;  

  t[0][0] =  sx ;  t[1][1] = sy ;
  D2d_mat_mult(a,  t,a) ;

  t[0][0] =  (1/sx) ;  t[1][1] = (1/sy) ;//is this the way to do the inverse? 
  D2d_mat_mult(b,  b,t) ;
  
  return 1 ;
}


int D2d_rotate (double a[3][3], double b[3][3], double radians) {
  double t[3][3] ;
  D2d_make_identity(t) ;  

  double cs = cos(radians);
  double sn = sin(radians);
  double negcs = cos(-1 * radians);
  double negsn = sin(-1 * radians);

  t[0][0] =  cs;  t[0][1] = -1 * sn;
  t[1][0] =  sn;  t[1][1] = cs;
  D2d_mat_mult(a,  t,a) ;

  t[0][0] =  negcs;  t[0][1] = -1 * negsn;
  t[1][0] =  negsn;  t[1][1] = negcs;
  D2d_mat_mult(b,  b,t) ;
  
  return 1 ;
}


int D2d_negate_x (double a[3][3], double b[3][3]) {
  double t[3][3] ;
  D2d_make_identity(t) ; 
  
  t[0][0] =  -1;  t[0][1] = -1;
  D2d_mat_mult(a,  t,a);

  t[0][0] =  -1;  t[0][1] = -1; //idk what to do for inverse....
  D2d_mat_mult(b,  b,t) ;

  return 1 ;
}

int D2d_negate_y (double a[3][3], double b[3][3]) {
  double t[3][3] ;
  D2d_make_identity(t) ; 
  
  t[1][0] =  -1;  t[1][1] = -1;
  D2d_mat_mult(a,  t,a);

  t[1][0] =  -1;  t[1][1] = -1; //idk what to do for inverse....
  D2d_mat_mult(b,  b,t) ;

  return 1 ;
}

/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////


int D2d_translate (double a[3][3], double b[3][3], double dx, double dy)
// a = translation*a  
// b = b*translation_inverse  
{
  double t[3][3] ;

  D2d_make_identity(t) ;

  t[0][2] =  dx ;  t[1][2] = dy ;  
  D2d_mat_mult(a,  t,a) ;

  t[0][2] = -dx ;  t[1][2] = -dy ;
  D2d_mat_mult(b,  b,t) ;

  return 1 ;
}

